from fastapi import FastAPI, HTTPException, Body
from pydantic import BaseModel
from typing import Optional, Dict, List
import requests
import json
import time
import os
import threading
from pyngrok import ngrok
import uvicorn

app = FastAPI(
    title="Ru-LLM –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤",
    description="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OLLAMA_URL = "http://localhost:11434/api"
MODEL_NAME = "ru-analyst"

# üéØ –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ì–û –ü–ï–†–ï–í–û–î–ê
SYSTEM_PROMPT = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.

–ü–†–ê–í–ò–õ–ê –ü–ï–†–ï–í–û–î–ê:
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (DDL, ETL, CSV, JSON, PostgreSQL, ClickHouse, HDFS, Airflow –∏ —Ç.–¥.) –ù–ï –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
3. –î–µ–ª–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–æ—á–Ω–æ
4. –í—Å–µ –¥–∞—Ç–∞-–∏–Ω–∂–µ–Ω–µ—Ä—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω

–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ï–†–ï–í–û–î–ê:
- –†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
- –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π: –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –º–æ–¥–µ–ª–µ–π –Ω–∞–ø—Ä–∏–º–µ—Ä

–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞ RU ‚Üí EN:
- "—Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É users —Å –ø–æ–ª—è–º–∏ id –∏ name" ‚Üí "create users table with id and name fields"
- "–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ETL –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ CSV –≤ ClickHouse" ‚Üí "setup ETL process from CSV to ClickHouse"

–ü—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞ EN ‚Üí RU:
- "create a daily DAG for data pipeline" ‚Üí "—Å–æ–∑–¥–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π DAG –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–∞–Ω–Ω—ã—Ö"
- "recommend database for time-series analytics" ‚Üí "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤"
"""


# üìä –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
class TranslationRequest(BaseModel):
    text: str
    context_type: str = "general"


class TranslationResponse(BaseModel):
    original_text: str
    translated_text: str
    success: bool


class AnalysisRequest(BaseModel):
    query: str
    context: Optional[dict] = None


class AnalysisResponse(BaseModel):
    russian_response: str
    technical_content: str
    status: str
    model_used: str


class HealthResponse(BaseModel):
    status: str
    model: str
    requests_processed: int = 0
    ollama_ready: bool = False
    model_loaded: bool = False


class TestRequest(BaseModel):
    test_prompt: str = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫—Ç–æ —Ç—ã."


# üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê
request_counter = 0


def wait_for_model_ready(timeout=120):
    """–ñ–¥–µ—Ç –ø–æ–∫–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞"""
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"{OLLAMA_URL}/tags", timeout=5)
            if response.status_code == 200:
                models = response.json().get("models", [])
                for model in models:
                    if model.get("name", "").startswith(MODEL_NAME):
                        print(f"‚úÖ –ú–æ–¥–µ–ª—å {MODEL_NAME} –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
                        return True
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏...")
            time.sleep(5)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            time.sleep(5)
    print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
    return False


def call_ollama_translate(text: str, direction: str) -> str:
    """–í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    global request_counter
    request_counter += 1

    if direction == "ru_en":
        user_prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä—É—Å—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:\n\n{text}"
    else:  # en_ru
        user_prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π:\n\n{text}"

    try:
        response = requests.post(
            f'{OLLAMA_URL}/generate',
            json={
                'model': MODEL_NAME,
                'prompt': user_prompt,
                'system': SYSTEM_PROMPT,
                'stream': False,
                'options': {
                    'temperature': 0.1,
                    'top_p': 0.9,
                    'num_predict': 1024
                }
            },
            timeout=300
        )

        if response.status_code == 200:
            result = response.json()
            translated_text = result.get('response', '').strip()

            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π
            lines = translated_text.split('\n')
            clean_lines = []
            for line in lines:
                line = line.strip()
                if line and not any(word in line.lower() for word in ['–ø–µ—Ä–µ–≤–æ–¥:', 'translation:', '–æ—Ç–≤–µ—Ç:', 'answer:']):
                    clean_lines.append(line)

            if clean_lines:
                return ' '.join(clean_lines)
            return translated_text
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}"

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"


def call_ollama_sync(prompt: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ Ollama –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    global request_counter
    request_counter += 1

    try:
        response = requests.post(
            f"{OLLAMA_URL}/generate",
            json={
                "model": MODEL_NAME,
                "prompt": prompt,
                "stream": False,
                "options": {"temperature": 0.1}
            },
            timeout=60
        )
        if response.status_code == 200:
            return response.json().get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"


# üìç –≠–ù–î–ü–û–ò–ù–¢–´ –ü–ï–†–ï–í–û–î–ê
@app.post("/ru-to-en", response_model=TranslationResponse)
async def russian_to_english(request: TranslationRequest):
    """–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    if not wait_for_model_ready():
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")

    translated_text = call_ollama_translate(request.text, "ru_en")
    success = not translated_text.startswith("–û—à–∏–±–∫–∞")

    return TranslationResponse(
        original_text=request.text,
        translated_text=translated_text,
        success=success
    )


@app.post("/en-to-ru", response_model=TranslationResponse)
async def english_to_russian(request: TranslationRequest):
    """–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"""
    if not wait_for_model_ready():
        raise HTTPException(status_code=503, detail="–ú–æ–¥–µ–ª—å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")

    translated_text = call_ollama_translate(request.text, "en_ru")
    success = not translated_text.startswith("–û—à–∏–±–∫–∞")

    return TranslationResponse(
        original_text=request.text,
        translated_text=translated_text,
        success=success
    )


# üìç –≠–ù–î–ü–û–ò–ù–¢–´ –ê–ù–ê–õ–ò–ó–ê (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ)
@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_request(request: AnalysisRequest):
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if not wait_for_model_ready():
            return AnalysisResponse(
                russian_response="–ú–æ–¥–µ–ª—å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥",
                technical_content="",
                status="model_loading",
                model_used=MODEL_NAME
            )

        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {request.query}. –û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è—Å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ."
        model_response = call_ollama_sync(prompt)

        return AnalysisResponse(
            russian_response=model_response,
            technical_content="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏",
            status="success",
            model_used=MODEL_NAME
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {str(e)}")


@app.post("/test-model")
async def test_model(request: TestRequest):
    """–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏"""
    try:
        if not wait_for_model_ready():
            return {
                "success": False,
                "error": "–ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30-60 —Å–µ–∫—É–Ω–¥.",
                "model_status": "loading"
            }

        model_response = call_ollama_sync(request.test_prompt)

        return {
            "success": True,
            "model_response": model_response,
            "model": MODEL_NAME,
            "prompt": request.test_prompt
        }
    except Exception as e:
        return {"success": False, "error": str(e)}


# üìç –°–õ–£–ñ–ï–ë–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{OLLAMA_URL}/tags", timeout=10)
        ollama_ready = response.status_code == 200

        models_loaded = False
        if ollama_ready:
            models = response.json().get("models", [])
            models_loaded = any(model.get("name", "").startswith(MODEL_NAME) for model in models)

        return HealthResponse(
            status="healthy" if (ollama_ready and models_loaded) else "degraded",
            model=MODEL_NAME,
            requests_processed=request_counter,
            ollama_ready=ollama_ready,
            model_loaded=models_loaded
        )
    except Exception as e:
        return HealthResponse(
            status="unhealthy",
            model=MODEL_NAME,
            requests_processed=request_counter,
            ollama_ready=False,
            model_loaded=False
        )


@app.get("/model-info")
async def model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.get(f"{OLLAMA_URL}/tags")
        models = response.json().get("models", [])

        model_info = None
        for model in models:
            if model.get("name", "").startswith(MODEL_NAME):
                model_info = model
                break

        return {
            "model_name": MODEL_NAME,
            "model_details": model_info,
            "total_models": len(models),
            "ollama_status": "running",
            "requests_processed": request_counter
        }
    except Exception as e:
        return {"error": str(e)}


@app.get("/")
async def root():
    return {
        "message": "Ru-LLM –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
        "endpoints": {
            "translation_ru_en": "POST /ru-to-en",
            "translation_en_ru": "POST /en-to-ru",
            "analysis": "POST /analyze",
            "test_model": "POST /test-model",
            "health": "GET /health",
            "model_info": "GET /model-info",
            "docs": "GET /docs"
        },
        "example_usage": {
            "ru_to_en": {
                "text": "—Å–æ–∑–¥–∞–π —Ç–∞–±–ª–∏—Ü—É users —Å –ø–æ–ª—è–º–∏ id –∏ name",
                "context_type": "sql"
            },
            "en_to_ru": {
                "text": "create a daily DAG for ETL pipeline",
                "context_type": "dag"
            }
        }
    }


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ ngrok (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # public_url = setup_ngrok()

    uvicorn.run(app, host="0.0.0.0", port=8080)